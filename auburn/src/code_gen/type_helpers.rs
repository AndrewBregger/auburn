use std::rc::Rc;

use oxide::vm::OpCode;

use crate::{ir::ast::BinaryOp, types::{Type, TypeKind}};

pub fn binary_op_for_type(op: BinaryOp, ty: Rc<Type>) -> OpCode {
    match op {
        BinaryOp::Plus => match ty.kind() {
            TypeKind::U8 => OpCode::AddU8,
            TypeKind::U16 => OpCode::AddU16,
            TypeKind::U32 => OpCode::AddU32,
            TypeKind::U64 => OpCode::AddU64,
            TypeKind::I8 => OpCode::AddI8,
            TypeKind::I16 => OpCode::AddI16,
            TypeKind::Integer | TypeKind::I32 => OpCode::AddI32,
            TypeKind::I64 => OpCode::AddI64,
            TypeKind::Float | TypeKind::F32 => OpCode::AddF32,
            TypeKind::F64 => OpCode::AddF64,
            // TypeKind::Char => {}
            // TypeKind::String => {}
            _ => todo!("{}", ty),
        },
        BinaryOp::Minus => match ty.kind() {
            TypeKind::U8 => OpCode::SubU8,
            TypeKind::U16 => OpCode::SubU16,
            TypeKind::U32 => OpCode::SubU32,
            TypeKind::U64 => OpCode::SubU64,
            TypeKind::I8 => OpCode::SubI8,
            TypeKind::I16 => OpCode::SubI16,
            TypeKind::Integer | TypeKind::I32 => OpCode::SubI32,
            TypeKind::I64 => OpCode::SubI64,
            TypeKind::Float | TypeKind::F32 => OpCode::SubF32,
            TypeKind::F64 => OpCode::SubF64,
            // TypeKind::Char => {}
            // TypeKind::String => {}
            _ => todo!("{}", ty),
        },
        BinaryOp::Astrick => match ty.kind() {
            TypeKind::U8 => OpCode::MultU8,
            TypeKind::U16 => OpCode::MultU16,
            TypeKind::U32 => OpCode::MultU32,
            TypeKind::U64 => OpCode::MultU64,
            TypeKind::I8 => OpCode::MultI8,
            TypeKind::I16 => OpCode::MultI16,
            TypeKind::Integer | TypeKind::I32 => OpCode::MultI32,
            TypeKind::I64 => OpCode::MultI64,
            TypeKind::Float | TypeKind::F32 => OpCode::MultF32,
            TypeKind::F64 => OpCode::MultF64,
            _ => todo!("{}", ty),
        },
        BinaryOp::Slash => match ty.kind() {
            TypeKind::U8 => OpCode::DivU8,
            TypeKind::U16 => OpCode::DivU16,
            TypeKind::U32 => OpCode::DivU32,
            TypeKind::U64 => OpCode::DivU64,
            TypeKind::I8 => OpCode::DivI8,
            TypeKind::I16 => OpCode::DivI16,
            TypeKind::Integer | TypeKind::I32 => OpCode::DivI32,
            TypeKind::I64 => OpCode::DivI64,
            TypeKind::Float | TypeKind::F32 => OpCode::DivF32,
            TypeKind::F64 => OpCode::DivF64,
            _ => todo!("{}", ty),
        },
        BinaryOp::Less => match ty.kind() {
            TypeKind::U8 => OpCode::LessU8,
            TypeKind::U16 => OpCode::LessU16,
            TypeKind::U32 => OpCode::LessU32,
            TypeKind::U64 => OpCode::LessU64,
            TypeKind::I8 => OpCode::LessI8,
            TypeKind::I16 => OpCode::LessI16,
            TypeKind::Integer | TypeKind::I32 => OpCode::LessI32,
            TypeKind::I64 => OpCode::LessI64,
            TypeKind::Float | TypeKind::F32 => OpCode::LessF32,
            TypeKind::F64 => OpCode::LessF64,
            _ => todo!("{}", ty),
        },

        BinaryOp::Greater => match ty.kind() {
            TypeKind::U8 => OpCode::GreaterU8,
            TypeKind::U16 => OpCode::GreaterU16,
            TypeKind::U32 => OpCode::GreaterU32,
            TypeKind::U64 => OpCode::GreaterU64,
            TypeKind::I8 => OpCode::GreaterI8,
            TypeKind::I16 => OpCode::GreaterI16,
            TypeKind::Integer | TypeKind::I32 => OpCode::GreaterI32,
            TypeKind::I64 => OpCode::GreaterI64,
            TypeKind::Float | TypeKind::F32 => OpCode::GreaterF32,
            TypeKind::F64 => OpCode::GreaterF64,
            _ => todo!("{}", ty),
        },

        BinaryOp::LessEq => match ty.kind() {
            TypeKind::U8 => OpCode::LessEqU8,
            TypeKind::U16 => OpCode::LessEqU16,
            TypeKind::U32 => OpCode::LessEqU32,
            TypeKind::U64 => OpCode::LessEqU64,
            TypeKind::I8 => OpCode::LessEqI8,
            TypeKind::I16 => OpCode::LessEqI16,
            TypeKind::Integer | TypeKind::I32 => OpCode::LessEqI32,
            TypeKind::I64 => OpCode::LessEqI64,
            TypeKind::Float | TypeKind::F32 => OpCode::LessEqF32,
            TypeKind::F64 => OpCode::LessEqF64,
            _ => todo!("{}", ty),
        },

        BinaryOp::GreaterEq => match ty.kind() {
            TypeKind::U8 => OpCode::GreaterEqU8,
            TypeKind::U16 => OpCode::GreaterEqU16,
            TypeKind::U32 => OpCode::GreaterEqU32,
            TypeKind::U64 => OpCode::GreaterEqU64,
            TypeKind::I8 => OpCode::GreaterEqI8,
            TypeKind::I16 => OpCode::GreaterEqI16,
            TypeKind::Integer | TypeKind::I32 => OpCode::GreaterEqI32,
            TypeKind::I64 => OpCode::GreaterEqI64,
            TypeKind::Float | TypeKind::F32 => OpCode::GreaterEqF32,
            TypeKind::F64 => OpCode::GreaterEqF64,
            _ => todo!("{}", ty),
        },

        BinaryOp::Ampersand => match ty.kind() {
            // TypeKind::U8 => OpCode::BinaryAndU8,
            // TypeKind::U16 => OpCode::BinaryAndU16,
            // TypeKind::U32 => OpCode::BinaryAndU32,
            // TypeKind::U64 => OpCode::BinaryAndU64,
            // TypeKind::I8 => OpCode::BinaryAndI8,
            // TypeKind::I16 => OpCode::BinaryAndI16,
            // TypeKind::Integer | TypeKind::I32 => OpCode::BinaryAndI32,
            // TypeKind::I64 => OpCode::BinaryAndI64,
            _ => todo!(),
        },

        BinaryOp::Pipe => match ty.kind() {
            // TypeKind::U8 => OpCode::BinaryOrU8,
            // TypeKind::U16 => OpCode::BinaryOrU16,
            // TypeKind::U32 => OpCode::BinaryOrU32,
            // TypeKind::U64 => OpCode::BinaryOrU64,
            // TypeKind::I8 => OpCode::BinaryOrI8,
            // TypeKind::I16 => OpCode::BinaryOrI16,
            // TypeKind::Integer | TypeKind::I32 => OpCode::BinaryOrI32,
            // TypeKind::I64 => OpCode::BinaryOrI64,
            _ => todo!(),
        },

        BinaryOp::Percent => match ty.kind() {
            // TypeKind::U8 => OpCode::PercentU8,
            // TypeKind::U16 => OpCode::PercentU16,
            // TypeKind::U32 => OpCode::PercentU32,
            // TypeKind::U64 => OpCode::PercentU64,
            // TypeKind::I8 => OpCode::PercentI8,
            // TypeKind::I16 => OpCode::PercentI16,
            // TypeKind::Integer | TypeKind::I32 => OpCode::PercentI32,
            // TypeKind::I64 => OpCode::PercentI64,
            _ => todo!(),
        },

        BinaryOp::EqualEqual => match ty.kind() {
            // TypeKind::U8 => OpCode::EqEqU8,
            // TypeKind::U16 => OpCode::EqEqU16,
            // TypeKind::U32 => OpCode::EqEqU32,
            // TypeKind::U64 => OpCode::EqEqU64,
            // TypeKind::I8 => OpCode::EqEqI8,
            // TypeKind::I16 => OpCode::EqEqI16,
            // TypeKind::Integer | TypeKind::I32 => OpCode::EqEqI32,
            // TypeKind::I64 => OpCode::EqEqI64,
            // TypeKind::Float | TypeKind::F32 => OpCode::EqEqF32,
            // TypeKind::F64 => OpCode::EqEqF64,
            _ => todo!(),
        },

        BinaryOp::BangEqual => match ty.kind() {
            // TypeKind::U8 => OpCode::NotEqU8,
            // TypeKind::U16 => OpCode::NotEqU16,
            // TypeKind::U32 => OpCode::NotEqU32,
            // TypeKind::U64 => OpCode::NotEqU64,
            // TypeKind::I8 => OpCode::NotEqI8,
            // TypeKind::I16 => OpCode::NotEqI16,
            // TypeKind::Integer | TypeKind::I32 => OpCode::NotEqI32,
            // TypeKind::I64 => OpCode::NotEqI64,
            // TypeKind::Float | TypeKind::F32 => OpCode::NotEqF32,
            // TypeKind::F64 => OpCode::NotEqF64,
            _ => todo!(),
        },

        BinaryOp::LessLess => match ty.kind() {
            // TypeKind::U8 => OpCode::LessLessU8,
            // TypeKind::U16 => OpCode::LessLessU16,
            // TypeKind::U32 => OpCode::LessLessU32,
            // TypeKind::U64 => OpCode::LessLessU64,
            // TypeKind::I8 => OpCode::LessLessI8,
            // TypeKind::I16 => OpCode::LessLessI16,
            // TypeKind::Integer | TypeKind::I32 => OpCode::LessLessI32,
            // TypeKind::I64 => OpCode::LessLessI64,
            // TypeKind::Float | TypeKind::F32 => OpCode::LessLessF32,
            // TypeKind::F64 => OpCode::LessLessF64,
            _ => todo!(),
        },

        BinaryOp::GreaterGreater => match ty.kind() {
            // TypeKind::U8 => OpCode::GreaterGreaterU8,
            // TypeKind::U16 => OpCode::GreaterGreaterU16,
            // TypeKind::U32 => OpCode::GreaterGreaterU32,
            // TypeKind::U64 => OpCode::GreaterGreaterU64,
            // TypeKind::I8 => OpCode::GreaterGreaterI8,
            // TypeKind::I16 => OpCode::GreaterGreaterI16,
            // TypeKind::Integer | TypeKind::I32 => OpCode::GreaterGreaterI32,
            // TypeKind::I64 => OpCode::GreaterGreaterI64,
            // TypeKind::Float | TypeKind::F32 => OpCode::GreaterGreaterF32,
            // TypeKind::F64 => OpCode::GreaterF64,
            _ => todo!(),
        },
    }
}
